apiVersion: v1
kind: Template
labels:
  template: kafka
metadata:
  annotations:
    description: Kafka Deployment and Runtime Components
    iconClass: icon-java
    tags: java,kafka
  name: kafka
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  data:
    entrypoint.sh: |-
      #!/bin/bash
      
      for i in $(eval echo "{0..$((NODES-1))}"); do
        KAFKA_ZOOKEEPER_CONNECT="$KAFKA_ZOOKEEPER_POD_NAME-$i.$KAFKA_ZOOKEEPER_POD_SERVICE:$KAFKA_ZOOKEEPER_PORT,$KAFKA_ZOOKEEPER_CONNECT";
      done;
      export KAFKA_ZOOKEEPER_CONNECT=$(echo $KAFKA_ZOOKEEPER_CONNECT | sed "s/[,]$//");
      echo "KAFKA_ZOOKEEPER_CONNECT: " $KAFKA_ZOOKEEPER_CONNECT;
      
      /etc/confluent/docker/run;
      
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-headless
  spec:
    clusterIP: None
    portalIP: None
    ports:
    - port: 9092
      protocol: TCP
      targetPort: 9092
    selector:
      application: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 9092
      protocol: TCP
      targetPort: 9092
    selector:
      application: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: ${NODES}
    selector:
      matchLabels:
        application: ${APPLICATION_NAME}
    serviceName: ${APPLICATION_NAME}-headless
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
      spec:
        containers:
        - name: ${APPLICATION_NAME}
          image: ${APPLICATION_IMAGE}
          imagePullPolicy: Always
        - command:
          - /bin/entrypoint.sh
          env:
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "PLAINTEXT://${APPLICATION_NAME}:9092"
          - name: KAFKA_ZOOKEEPER_PORT
            value: "2181"
          - name: NODES
            value: ${NODES}
          - name: KAFKA_ZOOKEEPER_POD_NAME
            value: ${ZOOKEEPER_NAME}
          - name: KAFKA_ZOOKEEPER_POD_SERVICE
            value: ${ZOOKEEPER_NAME}-headless
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_SERVICE
            value: ${APPLICATION_NAME}-headless
          ports:
          - containerPort: 9092
            protocol: TCP
          resources:
            requests:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /bin/entrypoint.sh
            name: ${APPLICATION_NAME}-volume
            readOnly: true
          - mountPath: ${PERSISTENT_VOLUME_MOUNTPATH}
            name: datadir
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    volumes:
    - name: ${APPLICATION_NAME}-volume
      configMap:
        defaultMode: 0700
        name: ${APPLICATION_NAME}
    volumeClaimTemplates:
    - metadata:
        labels:
          application: ${APPLICATION_NAME}
        name: datadir
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${STORAGE_SIZE}
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  required: true
  value: confluent-kafka
- description: zookeeper name
  name: ZOOKEEPER_NAME
  required: true
  value: confluent-zookeeper
- description: Kafka Image
  name: APPLICATION_IMAGE
  required: true
  value: confluentinc/cp-kafka:4.0.0
- description: Node count
  name: NODES
  required: true
  value: "3"
- description: Storage size
  name: STORAGE_SIZE
  required: true
  value: "1Gi"
  name: PERSISTENT_VOLUME_MOUNTPATH
  required: true
  value: "/var/lib/kafka"